generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  workspaces    UserWorkspace[]
  isNewUser     Boolean         @default(true) @map("is_new_user")

  @@map("users")
}

model Workspace {
  id          String          @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  users       UserWorkspace[]

  @@map("workspaces")
}

model Schedule {
  id            String   @id @default(cuid())
  name          String
  description   String?
  start DateTime
  end   DateTime

  @@map("schedules")
}

model UserWorkspace {
  userId      String
  workspaceId String
  createdAt   DateTime @default(now()) @map("created_at")
  isAdmin     Boolean  @map("is_admin")

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
  @@map("users_workspaces")
}

model UserWorkspaceSchedule {
  userId      String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@id([userId, workspaceId])
  @@map("users_workspaces_schedules")
}

// BELLOW MODELS USED FOR AUTHENTICATION WITH NEXT-AUTH

model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map("compound_id")
  userId             String    @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([userId], name: "userId")
  @@index([providerId], name: "providerId")
  @@index([providerAccountId], name: "providerAccountId")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}
